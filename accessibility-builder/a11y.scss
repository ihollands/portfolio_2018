@import 'breakpoint';

//
// Rem Mixin Stuff
//
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list) {
  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == 'list' {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return $result;
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property, $values in $properties {
      @include rem($property, $values...);
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

$primarycolors: (
  white: (
    base: #fff
  ),
  black: (
    base: #000
  ),
  gray: (
    tint1: #999,
    tint2: #eee,
    tint3: #f5f5f5,
    base: #666,
    shade1: #2e2d2d
  ),
  orange: (
    base: #ed562e,
    shade1: #d63b12
  ),
  blue: (
    base: #0ba3dc,
    shade1: #065b7b
  ),
  error: (
    base: #c02b33
  ),
  warning: (
    base: #ffd700
  ),
  notice: (
    base: #0ba3dc
  )
);

@function primary-color($color, $tone: base) {
  @return map-get(map-get($primarycolors, $color), $tone);
}

* {
  box-sizing: border-box;

  &::after,
  &::before {
    box-sizing: border-box;
  }
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
}

body,
html {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); // disable webkit tap highlight
}

body {
  color: primary-color(gray, shade1);
  font-family: 'Lato', 'Arial', sans-serif;
  @include rem(font-size, 16px);
  min-width: 320px;
}

.jumbotron {
  padding: 2em;

  .header-row {
    display: flex;
    align-items: center;

    img {
      flex: none;
      width: 75px;
      margin-right: 15px;
    }

    h1 {
      flex: 1 1 0;
    }
  }
}

.container {
  max-width: 1760px;

  @include breakpoint(768px) {
    padding-left: 30px;
    padding-right: 30px;
  }
}

main {
  margin: 45px auto;

  @include breakpoint(768px) {
    margin: 60px auto 80px;
  }
}

h1 {
  margin: 0;
}

h2 {
  font-size: 20px;
  font-weight: 400;
  margin: 45px 0 15px;

  strong {
    font-weight: 600;
  }
}

table {

  &.table {

    .thead-light {

      th {
        // background: primary-color(gray, tint2);
        color: primary-color(gray, shade1);
        font-weight: 600;
      }
    }
  }
}

tr {
  width: 100%;
  @include rem(font-size, 15px);

  &:nth-child(even) {
    background-color: rgba(0, 0, 0, .05);
  }

  .num {
    font-weight: 600;
    text-align: right;
    min-width: 45px;
  }

  .type {
    font-weight: 600;
    text-align: center;
    width: 87px;
  }

  .position {
    min-width: 150px;
  }

  .markup,
  .rule {
    width: 120px;
    font-weight: 600;
  }

  &[data-type='error'] {

    .type {
      background: rgba(primary-color(error), .4);
    }
  }

  &[data-type='warning'] {

    .type {
      background: rgba(primary-color(warning), .25);
    }
  }

  &[data-type='notice'] {
    display: none;

    .type {
      background: rgba(primary-color(notice), .05);
    }
  }
}

.custom-control-input:focus ~ .custom-control-label::before { // sass-lint:disable-line force-pseudo-nesting
  box-shadow: none;
}
